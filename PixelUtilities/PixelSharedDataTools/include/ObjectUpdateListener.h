#ifndef OBJECTUPDATELISTENER_H_
#define OBJECTUPDATELISTENER_H_

#include "ObjectUpdateEvent.h"
#include <iostream>
namespace pixel
{

/*
 * \class ObjectUpdateListener
 * \brief Interface for registering interest in ObjectUpdateEvents generated by a SharedObjectOwner
 * 
 * The ObjectUpdateListener is the interface that a listener
 * needs to implement if it wishes to get ObjectUpdateEvents
 * from a SharedObjectOwner.  The only method that is necessary
 * to implement is the actionPerformed() method, which is the
 * callback method that the SharedObjectOwner will be using
 * to feed your implementation its ObjectUpdateEvent.
 */
template <class T>
class ObjectUpdateListener
{
public:
	inline ObjectUpdateListener(){};
	inline virtual ~ObjectUpdateListener(){};
	
	//! The main callback method of the interface
	virtual void actionPerformed(const pixel::ObjectUpdateEvent<T>& e)=0;
	
};

}

#endif /*OBJECTUPDATELISTENER_H_*/
